import 'dart:ui';
import 'package:dreamcast/utils/size_utils.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

import '../utils/pref_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.black900.withOpacity(0.4),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Tenor Sans',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Tenor Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 12.fSize,
          fontFamily: 'Tenor Sans',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.gray50,
          fontSize: 41.fSize,
          fontFamily: 'Bodoni Moda 28pt',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary.withOpacity(0.6),
          fontSize: 38.fSize,
          fontFamily: 'Bodoni Moda 28pt',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: const Color(0XFF333333),
          fontSize: 30.fSize,
          fontFamily: 'Bodoni Moda 28pt',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF333333),
    primaryContainer: Color(0XFFC4C4C4),
    secondaryContainer: Color(0X87333333),

    // Error colors
    errorContainer: Color(0XFF555555),

    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFF212806),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);
  Color get white => const Color(0xffFFFFFF);

  // BlueGray
  Color get blueGray400 => const Color(0XFF888888);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray10001 => const Color(0XFFF4F3F7);
  Color get gray300 => const Color(0XFFDEDEDE);
  Color get gray50 => const Color(0XFFFCFCFC);
  Color get gray5001 => const Color(0XFFF8F8F8);
  Color get gray900 => const Color(0XFF14132A);

  // Indigo
  Color get indigo50 => const Color(0XFFE7EAEF);

  // Red
  Color get red300 => const Color(0XFFDD8560);

  // Black
// Blue
  Color get blueA200 => const Color(0XFF4285F4);
// BlueGray
  Color get blueGray40001 => const Color(0XFF888888);
// DeepOrange
  Color get deepOrange400 => const Color(0XFFFD6959);
// Gray

  Color get gray30001 => const Color(0XFFDCDCDD);
  Color get gray400 => const Color(0XFFC4C4C6);
  Color get gray40001 => const Color(0XFFBABABA);
// Green
  Color get green600 => const Color(0XFF359766);
  Color get greenA400 => const Color(0XFF0BDD94);
// Orange
  Color get orange300 => const Color(0XFFF8BB44);
// Purple
  Color get purple300 => const Color(0XFFB17FCC);
// Yellow
  Color get yellowA700 => const Color(0XFFFFCE00);


}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
